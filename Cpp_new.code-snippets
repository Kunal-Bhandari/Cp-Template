{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "competitive1",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <chrono>", 
			"using namespace std;\n\n",
			"$1",
 
"#define f0r(a, b) for (long long a = 0; a < (b); ++a)",
"#define f1r(a, b, c) for (long long a = (b); a < (c); ++a)",
"#define f0rd(a, b) for (long long a = (b); a >= 0; --a)",
"#define f1rd(a, b, c) for (long long a = (b); a >= (c); --a)",
"#define ms(arr, v) memset(arr, v, sizeof(arr))",
"#define pb push_back",
"#define send {ios_base::sync_with_stdio(false);}",
"#define help {cin.tie(NULL); cout.tie(NULL);}",
"#define fix(prec) {cout << setprecision(prec) << fixed;}",
"#define mp make_pair",
"#define f first",
"#define s second",
"#define all(v) v.begin(), v.end()",
"#define getunique(v) {sort(all(v)); v.erase(unique(all(v)), v.end());}",
"#define readgraph(list, edges) for (int i = 0; i < edges; i++) {int a, b; cin >> a >> b; a--; b--; list[a].pb(b); list[b].pb(a);}",
"#define ai(a, n) for (int ele = 0; ele < n; ele++) cin >> a[ele];",
"#define ain(a, lb, rb) for (int ele = lb; ele <= rb; ele++) cin >> a[ele];",
"#define ao(a, n) {for (int ele = 0; ele < (n); ele++) { if (ele) cout << \" \"; cout << a[ele]; } cout << n;}",
"#define aout(a, lb, rb) {for (int ele = (lb); ele <= (rb); ele++) { if (ele > (lb)) cout << \" \"; cout << a[ele]; } cout << n;}",
"#define vsz(x) ((long long) x.size())",
"typedef long long ll;",
"typedef long double lld;",
"typedef unsigned long long ull;",
"typedef pair<int, int> pii;",
"typedef pair<ll, ll> pll;",
"typedef vector<int> vi;",
"typedef vector<ll> vl;",
"typedef vector<pii> vpi;",
"typedef vector<pll> vpl;\n",
 
 
"const lld pi = 3.14159265358979323846;",
"// const ll mod = 1000000007;",
"// const ll mod = 998244353;",
"// ll mod;\n\n",
 
"/*---------------------------------Number Theory---------------------------------------------*/",

"ll gcd(ll a, ll b, ll& x, ll& y) {",
   "\tif (b == 0) {",
        "\t\tx = 1;",
        "\t\ty = 0;",
        "\t\treturn a;",
    "\t}",
    "\tll x1, y1;",
    "\tll d = gcd(b, a % b, x1, y1);",
    "\tx = y1;",
    "\ty = x1 - y1 * (a / b);",
    "\treturn d;",
"}",

"ll modInverse(ll a,ll m){",
	"\tll x, y;",
	"\tll g = gcd(a, m, x, y);",
	"\tif (g != 1) {",
	"\t\treturn -1;",
	"\t}",
	"\telse {",
		"\t\tx = (x % m + m) % m;",
		"\t\treturn x;",
	"\t}",
"}",

"bool is_prime(ll n){",
"\tfor (int i = 2; i <= sqrt(n); i++)",
"\t{",
"\t\tif(n%i==0)",
"\t\t\treturn false;",
"\t}",
"\treturn true;",
"}",

"/*-------------------------------DSU, By rank(depth of tree) --------------------------------*/",
"\n\n",
"ll find_set(ll v,vpl &parent) {    //The first holds the value of leader, the second holds the (rank or upperbound of depth)depth from this node to leader",
    "\tif (v == parent[v].f)",
        "\t\treturn v;",
    "\treturn parent[v].f = find_set(parent[v].f,parent);",
"}",
"\n",
"void union_sets(ll a, ll b,vpl &parent) {",
	"\tll rootA = find_set(a,parent); //leader for a ,automatically compresses path before every union call",
	"\tll rootB = find_set(b,parent); // leader for b",
    "\tif (rootA != rootB) {",
        "\t\tif (parent[rootA].s < parent[rootB].s){",
            "\t\t\tparent[rootA].f = rootB;",
        "\t\t}",
		"\t\telse if (parent[rootA].s > parent[rootB].s){",
            "\t\t\tparent[rootB].f = rootA;",
        "\t\t}",
        "\t\telse{",
			"\t\t\tparent[rootA].s++; //if both the trees of A and B have same rank then we join either one with ",
            "\t\t\tparent[rootB].f = rootA;  // the other and icrease the rank of their leader which we chose ",
        "\t\t} // we do this for sake of differentiating between large and small set",
    "\t}",
"}",
"\n\n",


"void solve() {",
	"\t$0",
"}\n",
 
"int main() {\n",
	
	"\tsend help",
	"\tint tc = 1;",
	"\tcin >> tc;//delete this line for single test",
	"\tfor (int t = 0; t < tc; t++) {",
		"\t\tsolve();\n",
		"\t\tcout<<\"\\n\";",
	"\t}",
	
"}\n",

"\t// stuff you should look for",
"\t//int overflow, array bounds",
"\t// special cases (n=1?), slow multiset operations",
"\t// do smth instead of nothing and stay organized",
		],
		"description": "Nahi chala toh naya banaunga"
	}
}